/**
 * Copyright 2017, Google, Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _ = require('lodash');
var fs = require('fs-extra');
var path = require('path');

var BuildPack = require('./build_pack');
var utils = require('../utils');

var SETUP = `
1.  Read [Prerequisites][prereq] and [How to run a sample][run] first.
1.  Install dependencies:

        pip install -r requirements.txt

[prereq]: ../README.md#prerequisites
[run]: ../README.md#how-to-run-a-sample`;

var TESTS = `
1.  Set the **GCLOUD_PROJECT** and **GOOGLE_APPLICATION_CREDENTIALS** environment variables.

1.  Run the tests:

        nox`;

var pythonConfig = {
  display: 'Python',
  lint: {
    cmd: 'nox',
    args: ['lint']
  },
  test: {
    app: {
      cmd: 'python',
      args: ['main.py']
    },
    build: {},
    deploy: {},
    install: {
      cmd: 'pip',
      args: ['install', '-r', 'requirements.txt']
    },
    run: {
      cmd: 'nox',
      args: []
    }
  },
  generate: {
    gitignore: {
      description: '.gitignore',
      filename: '.gitignore'
    },
    lib_readme: {
      description: 'README.rst',
      filename: 'README.rst',
      lib_install_cmd: 'pip install {{name}}',
      quickstart_filename: 'samples/quickstart.py',
      getLibPkgName(buildPack) {
        return buildPack.config.client_name;
      }
    },
    lib_samples_readme: {
      description: 'Generate a README.rst file for the samples/ folder of a client library.',
      filename: 'README.rst',
      validate(data) {
        if (!data.samples || !data.samples.length) {
          utils.logger.fatal('generate', `In order to generate lib_samples_readme, config must contain a non-empty "samples" array!`);
        }
      }
    },
    samples_readme: {
      setup: SETUP,
      tests: TESTS
    }
  }
};

/**
 * @class PythonBuildPack
 * @returns {PythonBuildPack} A new {@link PythonBuildPack} instance.
 */
module.exports = function (_BuildPack) {
  _inherits(PythonBuildPack, _BuildPack);

  function PythonBuildPack() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var innerOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, PythonBuildPack);

    return _possibleConstructorReturn(this, (PythonBuildPack.__proto__ || Object.getPrototypeOf(PythonBuildPack)).call(this, _.merge(pythonConfig, _.cloneDeep(config)), innerOpts));
  }

  _createClass(PythonBuildPack, null, [{
    key: 'detect',
    value: function detect(cwd) {
      try {
        if (fs.statSync(path.join(cwd, 'requirements.txt')).isFile()) {
          return true;
        }
      } catch (err) {
        // Ignore error
      }
      try {
        if (fs.statSync(path.join(cwd, 'setup.py')).isFile()) {
          return true;
        }
      } catch (err) {
        // Ignore error
      }
    }
  }]);

  return PythonBuildPack;
}(BuildPack);