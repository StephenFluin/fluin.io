/**
 * Copyright 2017, Google, Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

require('colors');

var fs = require('fs-extra');
var parser = require('yargs-parser');
var path = require('path');

var _require = require('../utils'),
    logger = _require.logger;

var packs = exports.packs = fs.readdirSync(__dirname).filter(function (name) {
  return name !== 'index.js' && name !== 'build_pack.js';
}).map(function (name) {
  return {
    name: name.replace('.js', ''),
    BuildPack: require(`./${name}`)
  };
});

exports.BuildPack = require('./build_pack');
exports.NodejsBuildPack = require('./nodejs');
exports.PythonBuildPack = require('./python');
exports.RubyBuildPack = require('./ruby');

var currentBuildPack = void 0;

/**
 * This methods examines the arguments passed to the current process in order
 * to infer which build pack to use. If localPath wasn't specified then it
 * will add it to the process args.
 *
 * @param {*} args
 */
exports.getBuildPack = function () {
  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.argv;

  var isHelpOrVersion = false;
  for (var i = 0; i < args.length; i++) {
    var arg = args[i];
    if (arg === '--help' || arg === '-h' || arg === '--version' || arg === '-v') {
      isHelpOrVersion = true;
      break;
    }
  }

  if (currentBuildPack) {
    // Return the cached build pack
    return currentBuildPack;
  }

  logger.debug('Detecting buildPack...');

  var buildPackName = void 0,
      localPath = void 0;
  var argv = parser(args);

  buildPackName = argv.buildPack || argv.b;
  localPath = argv.localPath || argv.l;

  if (localPath) {
    localPath = path.resolve(localPath);
    logger.debug(`Using provided localPath: ${localPath.yellow}`);
  } else {
    logger.debug('Inferring localPath...');
    localPath = process.cwd();
    var index = process.argv.indexOf('--');
    if (index >= 0) {
      process.argv.splice(index, 0, `--local-path=${localPath}`);
    } else {
      process.argv.push(`--local-path=${localPath}`);
    }
    logger.debug(`Inferred localPath: ${localPath.yellow}`);
  }

  // Try to load the build pack selected by the user
  if (buildPackName) {
    // Otherwise try to infer the build pack
    var _pack = packs.find(function (pack) {
      return pack.name === buildPackName;
    });
    if (!_pack) {
      logger.fatal('cli', `Invalid buildPack: ${buildPackName}`);
    }
    logger.debug(`Using specified buildPack: ${buildPackName.yellow}`);
    currentBuildPack = new _pack.BuildPack({}, {
      _name: buildPackName,
      _selected: true,
      _cwd: localPath
    });
    return currentBuildPack;
  }
  logger.debug('Inferring buildPack...');

  // Otherwise try to infer the build pack
  var pack = packs.find(function (pack) {
    try {
      return pack.BuildPack.detect(localPath);
    } catch (err) {
      // Ignore error
    }
  });

  if (pack) {
    var _index = process.argv.indexOf('--');
    var buildPackArg = `--build-pack=${pack.name}`;
    if (_index >= 0) {
      process.argv.splice(_index, 0, buildPackArg);
    } else {
      process.argv.push(buildPackArg);
    }
    logger.debug(`Inferred buildPack: ${pack.name.yellow}`);
    currentBuildPack = new pack.BuildPack({}, {
      _name: pack.name,
      _detected: true,
      _cwd: localPath
    });
    return currentBuildPack;
  }

  if (!isHelpOrVersion) {
    logger.error('cli', `Could not infer build pack! Using the default build pack which does not support all commands.`.yellow);
  }

  currentBuildPack = new exports.BuildPack();
  currentBuildPack._name = 'default';
  currentBuildPack._selected = true;
  currentBuildPack._cwd = localPath;
  return currentBuildPack;
};