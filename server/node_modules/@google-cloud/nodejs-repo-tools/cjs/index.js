'use strict';

var _arguments = arguments;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Copyright 2017, Google, Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

require('colors');

var assert = require('assert');
var childProcess = require('child_process');
var path = require('path');
var proxyquire = require('proxyquire').noPreserveCache();
var sinon = require('sinon');
var supertest = require('supertest');

var utils = exports.utils = require('./utils');

exports.buildPacks = require('./build_packs');

exports.getRequest = function (config) {
  if (process.env.TEST_URL || config.testUrl) {
    return supertest(process.env.TEST_URL || config.testUrl);
  } else if (process.env.E2E_TESTS) {
    return supertest(utils.getUrl(config));
  }
  return supertest(proxyquire(path.join(config.cwd, config.cmd || 'app'), {
    process: {
      env: config.env || process.env
    }
  }));
};

exports.run = function (cmd, cwd) {
  return childProcess.execSync(cmd, { cwd: cwd, shell: true }).toString().trim();
};

exports.runAsync = function (cmd, cwd) {
  return new Promise(function (resolve, reject) {
    childProcess.exec(cmd, { cwd: cwd, shell: true }, function (err, stdout) {
      if (err) {
        reject(err);
        return;
      }
      if (stdout) {
        resolve(stdout.toString().trim());
      } else {
        resolve(stdout);
      }
    });
  });
};

exports.runAsyncWithIO = function (cmd, cwd) {
  return new Promise(function (resolve, reject) {
    childProcess.exec(cmd, { cwd: cwd, shell: true }, function (err, stdout, stderr) {
      var result = {
        err: err,
        stdout: stdout ? stdout.toString().trim() : null,
        stderr: stderr ? stderr.toString().trim() : null
      };
      result.output = (result.stdout || '') + (result.stderr || '');
      if (err) {
        reject(result);
        return;
      }
      resolve(result);
    });
  });
};

exports.spawnAsyncWithIO = function (cmd, args, cwd, debug) {
  args || (args = []);
  var opts = debug;
  if (typeof opts === 'boolean') {
    opts = { debug: true };
  }
  opts || (opts = {});
  return new Promise(function (resolve, reject) {
    var done = false;
    var stdout = '';
    var stderr = '';

    function finish(err) {
      if (!done) {
        done = true;
        var results = {
          stdout: stdout.trim(),
          stderr: stderr.trim(),
          output: stdout.trim() + stderr.trim(),
          err: err
        };
        if (err) {
          reject(results);
        } else {
          resolve(results);
        }
      }
    }

    if (debug || debug !== false && process.env.DEBUG) {
      var _utils$logger;

      (_utils$logger = utils.logger).log.apply(_utils$logger, ['CMD', cmd].concat(_toConsumableArray(args)));
    }
    var child = childProcess.spawn(cmd, args, { cwd: cwd, shell: true });
    child.stdout.on('data', function (chunk) {
      if (debug || debug !== false && process.env.DEBUG) {
        utils.logger.log('stdout', chunk.toString());
      }
      stdout += chunk.toString();
    });
    child.stderr.on('data', function (chunk) {
      utils.logger.error('stderr', chunk.toString());
      stderr += chunk.toString();
    });
    child.on('error', finish).on('close', function () {
      finish();
    }).on('exit', function () {
      finish();
    });
  });
};

var Try = function () {
  function Try(test) {
    _classCallCheck(this, Try);

    this._maxTries = 10;
    this._maxDelay = 20000;
    this._timeout = 60000;
    this._iteration = 1;
    this._multiplier = 1.3;
    this._delay = 500;
    this._test = test;
  }

  _createClass(Try, [{
    key: 'execute',
    value: function execute() {
      var _this = this;

      if (this._iteration >= this._maxTries) {
        return this.reject(this._error || new Error('Reached maximum number of tries'));
      } else if (Date.now() - this._start >= this._timeout) {
        return this.reject(this._error || new Error('Test timed out'));
      }

      return Promise.resolve().then(function () {
        return _this._test(assert);
      }).then(function () {
        return _this.resolve();
      }).catch(function (err) {
        _this._error = err;
        _this._iteration++;
        _this._delay = Math.min(_this._delay * _this._multiplier, _this._maxDelay);
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            Promise.resolve().then(function () {
              return _this.execute();
            }).then(resolve, reject);
          }, _this._delay);
        });
      });
    }
  }, {
    key: 'timeout',
    value: function timeout(_timeout) {
      this._timeout = _timeout;
    }
  }, {
    key: 'tries',
    value: function tries(maxTries) {
      this._maxTries = maxTries;
    }
  }, {
    key: 'start',
    value: function start() {
      var _this2 = this;

      this._start = Date.now();
      this.promise = new Promise(function (resolve, reject) {
        _this2.resolve = resolve;
        _this2.reject = reject;
        _this2.execute().then(resolve, reject);
      });
      return this.promise;
    }
  }]);

  return Try;
}();

exports.tryTest = function (test) {
  return new Try(test);
};

exports.stubConsole = function () {
  /* eslint-disable no-console */
  if (typeof console.log.restore !== `function` && typeof console.error.restore !== `function`) {
    if (process.env.DEBUG) {
      sinon.spy(console, `error`);
      sinon.spy(console, `log`);
    } else {
      sinon.stub(console, `error`);
      sinon.stub(console, `log`).callsFake(function (a, b) {
        if (typeof a === `string` && a.indexOf(`\u001b`) !== -1 && typeof b === `string`) {
          console.log.apply(console, _arguments);
        }
      });
    }
  }
  /* eslint-enable no-console */
};

exports.restoreConsole = function () {
  /* eslint-disable no-console */
  if (typeof console.log.restore === `function`) {
    console.log.restore();
  }
  if (typeof console.error.restore === `function`) {
    console.error.restore();
  }
  /* eslint-enable no-console */
};

exports.checkCredentials = function (t) {
  if (t && typeof t.truthy === 'function') {
    t.truthy(process.env.GCLOUD_PROJECT, `Must set GCLOUD_PROJECT environment variable!`);
    t.truthy(process.env.GOOGLE_APPLICATION_CREDENTIALS, `Must set GOOGLE_APPLICATION_CREDENTIALS environment variable!`);
  } else {
    assert(process.env.GCLOUD_PROJECT, `Must set GCLOUD_PROJECT environment variable!`);
    assert(process.env.GOOGLE_APPLICATION_CREDENTIALS, `Must set GOOGLE_APPLICATION_CREDENTIALS environment variable!`);
    if (typeof t === 'function') {
      t();
    }
  }
};