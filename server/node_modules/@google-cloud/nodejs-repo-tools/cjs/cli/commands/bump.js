/**
 * Copyright 2018, Google, Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

require('colors');
var fs = require('fs');
var path = require('path');
var semver = require('semver');

var buildPack = require('../../build_packs').getBuildPack();
var utils = require('../../utils');

var CLI_CMD = 'bump';
var COMMAND = `tools ${CLI_CMD} ${'<rev>'.yellow}`;
var DESCRIPTION = `Bumps the specified semver value in both the main package and dependent packages (e.g. samples). ${'rev'.yellow.bold} can be one of ${'major'.green.bold}, ${'minor'.green.bold}, or ${'patch'.green.bold}.`;
var USAGE = `Usage:
  ${COMMAND.bold}
Description:
  ${DESCRIPTION}
Positional arguments:
  ${'<rev>'.bold}
    The semver version to increase.`;

exports.command = `${CLI_CMD} <rev>`;
exports.description = DESCRIPTION;
exports.builder = function (yargs) {
  yargs.usage(USAGE);
};
exports.handler = function (opts) {
  try {
    if (opts.dryRun) {
      utils.logger.log(CLI_CMD, 'Beginning dry run.'.cyan);
    }

    if (!opts.rev) {
      throw new Error(`For argument "rev" expected one of "major", "minor", or "patch".`);
    } else if (!opts.rev.match(/^major|minor|patch$/)) {
      throw new Error(`For argument "rev" expected one of "major", "minor", or "patch".`);
    }

    buildPack.expandConfig(opts);

    var oldVersion = buildPack.config.pkgjson.version;
    var name = buildPack.config.pkgjson.name;
    var newVersion = semver.inc(oldVersion, opts.rev);

    utils.logger.log(CLI_CMD, `Version will be bumped from ${oldVersion.yellow} to ${newVersion.yellow}.`);

    var samplesPackageJson = void 0;
    var samplesPackageJsonPath = path.join(buildPack.config.global.localPath, 'samples', 'package.json');
    if (fs.existsSync(samplesPackageJsonPath)) {
      try {
        samplesPackageJson = JSON.parse(fs.readFileSync(samplesPackageJsonPath));
      } catch (err) {
        throw new Error(`Cannot parse samples package.json located at ${samplesPackageJsonPath}: ${err.toString()}`);
      }
    }

    utils.logger.log(CLI_CMD, `Version in ${'package.json'.yellow} will be set to ${newVersion.yellow}.`);
    if (samplesPackageJson !== undefined) {
      var dependency = `'${name}': '${newVersion}'`;
      utils.logger.log(CLI_CMD, `${'samples/package.json'.yellow} will depend on ${dependency.yellow}.`);
    }

    if (opts.dryRun) {
      utils.logger.log(CLI_CMD, 'Dry run complete.'.cyan);
      return;
    }

    buildPack.config.pkgjson['version'] = newVersion;
    var packageJsonPath = path.join(opts.localPath, 'package.json');

    try {
      fs.writeFileSync(packageJsonPath, JSON.stringify(buildPack.config.pkgjson, null, '  ') + '\n');
    } catch (err) {
      throw new Error(`Cannot write ${packageJsonPath}: ${err.toString()}`);
    }

    if (samplesPackageJson !== undefined) {
      if (samplesPackageJson['dependencies'] === undefined) {
        samplesPackageJson['dependencies'] = {};
      }
      samplesPackageJson['dependencies'][name] = newVersion;
      try {
        fs.writeFileSync(samplesPackageJsonPath, JSON.stringify(samplesPackageJson, null, '  ') + '\n');
      } catch (err) {
        throw new Error(`Cannot write ${samplesPackageJsonPath}: ${err.toString()}`);
      }
    }
    var message = `Files updated. Please regenerate package lock files and commit them:
      ${'rm -f package-lock.json && npm install && npm link'.yellow}
      ${'git add package.json package-lock.json'.yellow}`;
    if (samplesPackageJson !== undefined) {
      message += `
      ${'cd samples && rm -f package-lock.json && npm link ../ && npm install && cd ..'.yellow}
      ${'git add samples/package.json samples/package-lock.json'.yellow}`;
    }
    message += `
      ${'git commit -m "chore: bump version to'.yellow} ${newVersion.yellow}${'"'.yellow}`;
    utils.logger.log('bump', message);
  } catch (err) {
    utils.logger.error(CLI_CMD, err.toString());
    // eslint-disable-next-line no-process-exit
    process.exit(1);
  }
};