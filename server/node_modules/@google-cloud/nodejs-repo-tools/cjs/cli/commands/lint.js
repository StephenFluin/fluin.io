/**
 * Copyright 2017, Google, Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

require('colors');

var _require = require('child_process'),
    spawn = _require.spawn;

var buildPack = require('../../build_packs').getBuildPack();
var utils = require('../../utils');

var CLI_CMD = 'lint';
// Currently, the base lint command/args are not configurable from the
// command-line.
var LINT_CMD = buildPack.config.lint.cmd;
var LINT_ARGS = buildPack.config.lint.args;
var LINT_CMD_STR = `${LINT_CMD} ${LINT_ARGS.join(' ')}`.trim();
var COMMAND = `tools ${CLI_CMD} -- ${'[files...]'.yellow}`;
var DESCRIPTION = `Lint files by running: ${LINT_CMD_STR.bold} in ${buildPack._cwd.yellow}.`;
var USAGE = `Usage:
  ${COMMAND.bold}
Description:
  ${DESCRIPTION}
Positional arguments:
  ${'files'.bold} (variadic)
    The files to lint.`;

exports.command = `${CLI_CMD}`;
exports.description = DESCRIPTION;
exports.builder = function (yargs) {
  yargs.usage(USAGE).options({
    cmd: {
      description: `${'Default:'.bold} ${`${LINT_CMD}`.yellow}. The lint command to use.`,
      type: 'string'
    }
  });
};
exports.handler = function (opts) {
  if (opts.dryRun) {
    utils.logger.log(CLI_CMD, 'Beginning dry run.'.cyan);
  }

  buildPack.expandConfig(opts);

  opts.cmd || (opts.cmd = buildPack.config.lint.cmd);
  opts.args || (opts.args = buildPack.config.lint.args);

  utils.logger.log(CLI_CMD, 'Linting files in:', opts.localPath.yellow);
  utils.logger.log(CLI_CMD, 'Running:', opts.cmd.yellow, opts.args.join(' ').yellow);

  if (opts.dryRun) {
    utils.logger.log(CLI_CMD, 'Dry run complete.'.cyan);
    return;
  }

  var options = {
    cwd: opts.localPath,
    stdio: 'inherit',
    shell: true
  };

  var start = Date.now();

  spawn(opts.cmd, opts.args, options).on('exit', function (code, signal) {
    var timeTakenStr = utils.getTimeTaken(start);
    if (code !== 0 || signal) {
      utils.logger.error(CLI_CMD, `Oh no! Linting failed after ${timeTakenStr}.`);
      // eslint-disable-next-line no-process-exit
      process.exit(code || 1);
    } else {
      utils.logger.log(CLI_CMD, `Success! Linting finished in ${timeTakenStr}.`.green);
    }
  });
};