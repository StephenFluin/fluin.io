/**
 * Copyright 2017, Google, Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

require('colors');

var _ = require('lodash');
var childProcess = require('child_process');
var fs = require('fs-extra');
var path = require('path');

var buildPack = require('../../../build_packs').getBuildPack();
var options = require('../../options');
var utils = require('../../../utils');

var CLI_CMD = 'deploy';
var DEPLOY_CMD = buildPack.config.test.deploy.cmd;
var COMMAND = `tools test ${CLI_CMD} ${'[options]'.yellow}`;
var DESCRIPTION = `Deploy an app and test it with a GET request.`;
var USAGE = `Usage:
  ${COMMAND.bold}
Description:
  ${DESCRIPTION}`;

exports.command = CLI_CMD;
exports.description = DESCRIPTION;
exports.builder = function (yargs) {
  yargs.usage(USAGE).options({
    cmd: {
      description: `${'Default:'.bold} ${DEPLOY_CMD.yellow}. Override the command used to deploy the app.`,
      type: 'string'
    },
    project: {
      alias: 'p',
      description: `${'Default:'.bold} ${`${buildPack.config.global.project}`.yellow}. The project ID to use ${'inside'.italic} the build.`,
      requiresArg: true,
      type: 'string'
    },
    delete: {
      default: true,
      description: `${'Default:'.bold} ${'true'.yellow}. Whether to delete the deployed app after the test finishes.`,
      type: 'boolean'
    },
    config: options.config,
    'config-key': options['config-key'],
    msg: {
      description: 'Set a message the should be found in the response to the rest request.',
      requiresArg: true,
      type: 'string'
    },
    'required-env-vars': {
      alias: 'r',
      description: 'Specify environment variables that must be set for the test to succeed.',
      requiresArg: true,
      type: 'string'
    },
    substitutions: {
      description: `Specify variable substitutions for the deployment's yaml file.`,
      requiresArg: true,
      type: 'string'
    },
    tries: {
      description: `${'Default:'.bold} ${'1'.yellow}. Number of times to attempt deployment. Deployment will only be attempted again if the previous deployment fails. Must be greater than zero.`,
      requiresArg: true,
      type: 'number'
    },
    yaml: {
      description: `${'Default:'.bold} ${'app.yaml'.yellow}. Specify the base yaml file to use when deploying.`,
      requiresArg: true,
      type: 'string'
    }
  });
};

exports.handler = function (opts) {
  if (opts.dryRun) {
    utils.logger.log(CLI_CMD, 'Beginning dry run.'.cyan);
  }

  buildPack.expandConfig(opts);

  opts.cmd || (opts.cmd = DEPLOY_CMD);
  opts.yaml || (opts.yaml = buildPack.config.test.deploy.yaml);
  opts.version || (opts.version = path.parse(opts.localPath).base);
  if (opts.tries === undefined) {
    opts.tries = buildPack.config.test.deploy.tries;
  }
  if (opts.tries < 1) {
    // Must try at least once
    opts.tries = 1;
  }

  // Verify that required env vars are set, if any
  opts.requiredEnvVars = opts.requiredEnvVars || _.get(buildPack, 'config.test.app.requiredEnvVars', []);
  if (opts.requiredEnvVars && typeof opts.requiredEnvVars === 'string') {
    opts.requiredEnvVars = opts.requiredEnvVars.split(',');
  }
  opts.requiredEnvVars.forEach(function (envVar) {
    if (!process.env[envVar]) {
      utils.logger.fatal(CLI_CMD, `Test requires that the ${envVar} environment variable be set!`);
    }
  });

  if (!opts.project) {
    utils.logger.fatal(CLI_CMD, 'You must provide a project ID!');
  }

  return new Promise(function (resolve, reject) {
    opts.now = Date.now();

    utils.logger.log(CLI_CMD, `Deploying app in: ${opts.localPath.yellow}`);

    // Manually set # of instances to 1
    var tmpAppYaml = changeScaling(opts);

    if (process.env.CLOUD_BUILD) {
      try {
        childProcess.execSync(`gcloud auth activate-service-account --key-file key.json`, {
          cwd: opts.localPath,
          stdio: opts.silent ? 'ignore' : 'inherit'
        });
      } catch (err) {
        // Ignore error
      }
    } else {
      utils.logger.log(CLI_CMD, 'Using configured credentials.');
    }

    opts.args = ['app', 'deploy', path.parse(tmpAppYaml).base,
    // Skip prompt
    '-q', `--project=${opts.project}`,
    // Deploy over existing version so we don't have to clean up
    `--version=${opts.version}`, '--no-promote'];

    utils.logger.log(CLI_CMD, 'Running:', opts.cmd.yellow, opts.args.join(' ').yellow);

    if (opts.dryRun) {
      utils.logger.log(CLI_CMD, 'Dry run complete.'.cyan);
      return;
    }

    var options = {
      cwd: opts.localPath,
      // shell: true,
      stdio: opts.silent ? 'ignore' : 'inherit',
      timeout: 12 * 60 * 1000, // 12-minute timeout
      shell: true
    };

    var start = Date.now();

    var triesRemaining = opts.tries;

    function attemptDeploy() {
      if (triesRemaining >= 1) {
        triesRemaining--;

        childProcess.spawn(opts.cmd, opts.args, options).on('exit', function (code, signal) {
          var timeTakenStr = utils.getTimeTaken(start);

          if (code || signal) {
            utils.logger.error(CLI_CMD, `Oh no! Deployment failed after ${timeTakenStr}.`);
          } else {
            utils.logger.log(CLI_CMD, `Success! Deployment finished in ${timeTakenStr}.`.green);
          }

          // Give app time to start
          setTimeout(function () {
            // Test versioned url of "default" module
            var demoUrl = utils.getUrl(opts);

            // Test that app is running successfully
            utils.testRequest(demoUrl, opts).then(function () {
              timeTakenStr = utils.getTimeTaken(start);
              utils.logger.log(CLI_CMD, `Success! Test finished in ${timeTakenStr}.`.green);
              resolve();
            }, function (err) {
              utils.logger.error(CLI_CMD, `Oh no! Test failed after ${timeTakenStr}.`, err);

              // Try the test again if any available tries remain
              attemptDeploy();
            });
          }, 5000);
        });
      } else {
        var timeTakenStr = utils.getTimeTaken(start);
        reject(new Error(`Exhausted available deployment attempts after ${timeTakenStr}.`));
      }
    }

    attemptDeploy();
  }).then(function () {
    if (opts.delete && !opts.dryRun) {
      return utils.deleteVersion(opts).catch(function () {});
    }
  }, function (err) {
    if (opts.delete && !opts.dryRun) {
      return utils.deleteVersion(opts).catch(function () {}).then(function () {
        return Promise.reject(err);
      });
    }
    return Promise.reject(err);
  }).catch(function (err) {
    utils.logger.fatal(CLI_CMD, err.message);
  });
};

function changeScaling(opts) {
  var oldYamlPath = path.join(opts.localPath, opts.yaml);
  var newYamlPath = path.join(opts.localPath, `${opts.version}-${opts.now}.yaml`);

  utils.logger.log(CLI_CMD, 'Compiling:', newYamlPath.yellow);
  var yaml = fs.readFileSync(oldYamlPath, 'utf8');
  yaml += `\n\nmanual_scaling:\n  instances: 1\n`;

  if (opts.substitutions) {
    opts.substitutions.split(',').map(function (sub) {
      return sub.split('=');
    }).forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          key = _ref2[0],
          value = _ref2[1];

      yaml = yaml.replace(key, value.startsWith('$') ? process.env[value.substring(1)] : value);
    });
  }

  if (opts.dryRun) {
    utils.logger.log(CLI_CMD, 'Printing:', newYamlPath.yellow, `\n${yaml}`);
  } else {
    utils.logger.log(CLI_CMD, 'Writing:', newYamlPath.yellow);
    fs.writeFileSync(newYamlPath, yaml, 'utf8');
  }

  return newYamlPath;
}