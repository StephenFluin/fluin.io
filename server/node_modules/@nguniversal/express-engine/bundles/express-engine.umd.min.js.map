{"version":3,"sources":["modules/express-engine/express-engine.umd.js"],"names":["global","factory","exports","module","require","define","amd","npm_package","fs","ng","core","compiler","platformServer","nguniversal","expressEngine","tokens","this","FileLoader","prototype","get","url","Promise","resolve","reject","readFile","err","buffer","toString","templateCache","factoryCacheMap","Map","ngExpressEngine","setupOptions","compiler$$1","platformDynamicServer","injector","CompilerFactory","createCompiler","providers","provide","ResourceLoader","useClass","deps","filePath","options","callback","moduleOrFactory","bootstrap","Error","extraProviders_1","concat","getReqResProviders","req","res","REQUEST","useValue","push","RESPONSE","INITIAL_CONFIG","document","getDocument","readFileSync","originalUrl","getFactory","NgModuleFactory","moduleFactory","compileModuleAsync","then","set","renderModuleFactory","extraProviders","html","Object","defineProperty","value"],"mappings":"CAAC,SAAUA,EAAQC,GACC,iBAAZC,SAA0C,oBAAXC,OAAyBF,EAAQC,QAASE,QAAQ,MAAOA,QAAQ,iBAAkBA,QAAQ,qBAAsBA,QAAQ,4BAA6BA,QAAQ,uCAClL,mBAAXC,QAAyBA,OAAOC,IAAMD,QAAQ,UAAW,KAAM,gBAAiB,oBAAqB,2BAA4B,sCAAuCJ,GAC9KA,EAASD,EAAOO,eAAkBP,EAAOQ,GAAGR,EAAOS,GAAGC,KAAKV,EAAOS,GAAGE,SAASX,EAAOS,GAAGG,eAAeZ,EAAOa,YAAYC,cAAcC,QAH1I,CAIEC,KAAM,SAAWd,EAAQM,EAAGE,EAAKC,EAASC,EAAeG,GAAU,aAErE,IAAIE,EAA4B,WAC5B,SAASA,KAYT,OAVAA,EAAWC,UAAUC,IAAM,SAAUC,GACjC,OAAO,IAAIC,QAAQ,SAAUC,EAASC,GAClCf,EAAGgB,SAASJ,EAAK,SAAUK,EAAKC,GAC5B,GAAID,EACA,OAAOF,EAAOE,GAElBH,EAAQI,EAAOC,iBAIpBV,EAboB,GAmB3BW,KAIAC,EAAkB,IAAIC,IAwG1B5B,EAAQ6B,gBApGR,SAASA,EAAgBC,GACrB,IACIC,EADkBrB,EAAesB,wBAAwBC,SAAShB,IAAIT,EAAK0B,iBAC7CC,iBAE1BC,YACMC,QAAS5B,EAAS6B,eAAgBC,SAAUxB,EAAYyB,aAItE,OAAO,SAAUC,EAAUC,EAASC,GAChCD,EAAQN,UAAYM,EAAQN,cAC5B,IACI,IAAIQ,EAAkBF,EAAQG,WAAaf,EAAae,UACxD,IAAKD,EACD,MAAM,IAAIE,MAAM,qEAEpBhB,EAAaM,UAAYN,EAAaM,cACtC,IAAIW,EAAmBjB,EAAaM,UAAUY,OAAON,EAAQN,UAyDzE,SAASa,EAAmBC,EAAKC,GAC7B,IAAIf,IAEIC,QAASxB,EAAOuC,QAChBC,SAAUH,IASlB,OANIC,GACAf,EAAUkB,MACNjB,QAASxB,EAAO0C,SAChBF,SAAUF,IAGXf,EAtEyEa,CAAmBP,EAAQQ,IAAKR,EAAQS,OAExGd,QAAS3B,EAAe8C,eACxBH,UACII,SAAUf,EAAQe,UAuE1C,SAASC,EAAYjB,GACjB,OAAOf,EAAce,GAAYf,EAAce,IAAanC,EAAGqD,aAAalB,GAAUhB,WAxEpCiC,CAAYjB,GAC1CvB,IAAKwB,EAAQxB,KAAOwB,EAAQQ,IAAIU,iBAwBxD,SAASC,EAAWjB,EAAiBb,GACjC,OAAO,IAAIZ,QAAQ,SAAUC,EAASC,GAElC,GAAIuB,aAA2BpC,EAAKsD,gBAChC1C,EAAQwB,OADZ,CAKI,IAAImB,EAAgBpC,EAAgBV,IAAI2B,GAEpCmB,EACA3C,EAAQ2C,GAIZhC,EAAYiC,mBAAmBpB,GAC1BqB,KAAK,SAAUlE,GAChB4B,EAAgBuC,IAAItB,EAAiB7C,GACrCqB,EAAQrB,IACT,SAAWwB,GACVF,EAAOE,SAxCXsC,CAAWjB,EAAiBb,GACvBkC,KAAK,SAAUlE,GAChB,OAAOW,EAAeyD,oBAAoBpE,GACtCqE,eAAgBrB,MAGnBkB,KAAK,SAAUI,GAChB1B,EAAS,KAAM0B,IAChB,SAAU9C,GACToB,EAASpB,KAGjB,MAAOA,GACHoB,EAASpB,MA+DrB+C,OAAOC,eAAevE,EAAS,cAAgBwE,OAAO","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('fs'), require('@angular/core'), require('@angular/compiler'), require('@angular/platform-server'), require('@nguniversal/express-engine/tokens')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', 'fs', '@angular/core', '@angular/compiler', '@angular/platform-server', '@nguniversal/express-engine/tokens'], factory) :\n\t(factory((global.npm_package = {}),global.fs,global.ng.core,global.ng.compiler,global.ng.platformServer,global.nguniversal.expressEngine.tokens));\n}(this, (function (exports,fs,core,compiler,platformServer,tokens) { 'use strict';\n\nvar FileLoader = /** @class */ (function () {\n    function FileLoader() {\n    }\n    FileLoader.prototype.get = function (url) {\n        return new Promise(function (resolve, reject) {\n            fs.readFile(url, function (err, buffer) {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(buffer.toString());\n            });\n        });\n    };\n    return FileLoader;\n}());\n\n/**\n * This holds a cached version of each index used.\n */\nvar templateCache = {};\n/**\n * Map of Module Factories\n */\nvar factoryCacheMap = new Map();\n/**\n * This is an express engine for handling Angular Applications\n */\nfunction ngExpressEngine(setupOptions) {\n    var compilerFactory = platformServer.platformDynamicServer().injector.get(core.CompilerFactory);\n    var compiler$$1 = compilerFactory.createCompiler([\n        {\n            providers: [\n                { provide: compiler.ResourceLoader, useClass: FileLoader, deps: [] }\n            ]\n        }\n    ]);\n    return function (filePath, options, callback) {\n        options.providers = options.providers || [];\n        try {\n            var moduleOrFactory = options.bootstrap || setupOptions.bootstrap;\n            if (!moduleOrFactory) {\n                throw new Error('You must pass in a NgModule or NgModuleFactory to be bootstrapped');\n            }\n            setupOptions.providers = setupOptions.providers || [];\n            var extraProviders_1 = setupOptions.providers.concat(options.providers, getReqResProviders(options.req, options.res), [\n                {\n                    provide: platformServer.INITIAL_CONFIG,\n                    useValue: {\n                        document: options.document || getDocument(filePath),\n                        url: options.url || options.req.originalUrl\n                    }\n                }\n            ]);\n            getFactory(moduleOrFactory, compiler$$1)\n                .then(function (factory) {\n                return platformServer.renderModuleFactory(factory, {\n                    extraProviders: extraProviders_1\n                });\n            })\n                .then(function (html) {\n                callback(null, html);\n            }, function (err) {\n                callback(err);\n            });\n        }\n        catch (err) {\n            callback(err);\n        }\n    };\n}\n/**\n * Get a factory from a bootstrapped module/ module factory\n */\nfunction getFactory(moduleOrFactory, compiler$$1) {\n    return new Promise(function (resolve, reject) {\n        // If module has been compiled AoT\n        if (moduleOrFactory instanceof core.NgModuleFactory) {\n            resolve(moduleOrFactory);\n            return;\n        }\n        else {\n            var moduleFactory = factoryCacheMap.get(moduleOrFactory);\n            // If module factory is cached\n            if (moduleFactory) {\n                resolve(moduleFactory);\n                return;\n            }\n            // Compile the module and cache it\n            compiler$$1.compileModuleAsync(moduleOrFactory)\n                .then(function (factory) {\n                factoryCacheMap.set(moduleOrFactory, factory);\n                resolve(factory);\n            }, (function (err) {\n                reject(err);\n            }));\n        }\n    });\n}\n/**\n * Get providers of the request and response\n */\nfunction getReqResProviders(req, res) {\n    var providers = [\n        {\n            provide: tokens.REQUEST,\n            useValue: req\n        }\n    ];\n    if (res) {\n        providers.push({\n            provide: tokens.RESPONSE,\n            useValue: res\n        });\n    }\n    return providers;\n}\n/**\n * Get the document at the file path\n */\nfunction getDocument(filePath) {\n    return templateCache[filePath] = templateCache[filePath] || fs.readFileSync(filePath).toString();\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.ngExpressEngine = ngExpressEngine;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=express-engine.umd.js.map\n"]}